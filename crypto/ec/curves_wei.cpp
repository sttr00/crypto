#include "curves_wei.h"
#include <crypto/oid_const.h>
#include <platform/endian.h>
#include <string.h>

using namespace oid;

// secp192k1
static const uint8_t secp192k1_p[] =
{
 0x37, 0xEE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

static const uint8_t secp192k1_b[] =
{
 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp192k1_x[] =
{
 0x7D, 0x6C, 0xE0, 0xEA, 0xB1, 0xD1, 0xA5, 0x1D,
 0x34, 0xF4, 0xB7, 0x80, 0x02, 0x7D, 0xB0, 0x26,
 0xAE, 0xE9, 0x57, 0xC0, 0x0E, 0xF1, 0x4F, 0xDB
};

static const uint8_t secp192k1_y[] =
{
 0x9D, 0x2F, 0x5E, 0xD9, 0x88, 0xAA, 0x82, 0x40,
 0x34, 0x86, 0xBE, 0x15, 0xD0, 0x63, 0x41, 0x84,
 0xA7, 0x28, 0x56, 0x9C, 0x6D, 0x2F, 0x2F, 0x9B
};

static const uint8_t secp192k1_n[] =
{
 0x8D, 0xFD, 0xDE, 0x74, 0x6A, 0x46, 0x69, 0x0F,
 0x17, 0xFC, 0xF2, 0x26, 0xFE, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// secp192r1 aka prime192v1 aka NIST P-192
static const uint8_t secp192r1_p[] =
{
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

static const uint8_t secp192r1_b[] =
{
 0xB1, 0xB9, 0x46, 0xC1, 0xEC, 0xDE, 0xB8, 0xFE,
 0x49, 0x30, 0x24, 0x72, 0xAB, 0xE9, 0xA7, 0x0F,
 0xE7, 0x80, 0x9C, 0xE5, 0x19, 0x05, 0x21, 0x64
};

static const uint8_t secp192r1_x[] =
{
 0x12, 0x10, 0xFF, 0x82, 0xFD, 0x0A, 0xFF, 0xF4,
 0x00, 0x88, 0xA1, 0x43, 0xEB, 0x20, 0xBF, 0x7C,
 0xF6, 0x90, 0x30, 0xB0, 0x0E, 0xA8, 0x8D, 0x18
};

static const uint8_t secp192r1_y[] =
{
 0x11, 0x48, 0x79, 0x1E, 0xA1, 0x77, 0xF9, 0x73,
 0xD5, 0xCD, 0x24, 0x6B, 0xED, 0x11, 0x10, 0x63,
 0x78, 0xDA, 0xC8, 0xFF, 0x95, 0x2B, 0x19, 0x07
};

static const uint8_t secp192r1_n[] =
{
 0x31, 0x28, 0xD2, 0xB4, 0xB1, 0xC9, 0x6B, 0x14,
 0x36, 0xF8, 0xDE, 0x99, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// secp224k1
static const uint8_t secp224k1_p[] =
{
 0x6D, 0xE5, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224k1_b[] =
{
 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224k1_x[] =
{
 0x5C, 0xA4, 0xB7, 0xB6, 0x0E, 0x65, 0x7E, 0x0F,
 0xA9, 0x75, 0x70, 0xE4, 0xE9, 0x67, 0xA4, 0x69,
 0xA1, 0x28, 0xFC, 0x30, 0xDF, 0x99, 0xF0, 0x4D,
 0x33, 0x5B, 0x45, 0xA1, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224k1_y[] =
{
 0xA5, 0x61, 0x6D, 0x55, 0xDB, 0x4B, 0xCA, 0xE2,
 0x59, 0xBD, 0xB0, 0xC0, 0xF7, 0x19, 0xE3, 0xF7,
 0xD6, 0xFB, 0xCA, 0x82, 0x42, 0x34, 0xBA, 0x7F,
 0xED, 0x9F, 0x08, 0x7E, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224k1_n[] =
{
 0xF7, 0xB1, 0x9F, 0x76, 0x71, 0xA9, 0xF0, 0xCA,
 0x84, 0x61, 0xEC, 0xD2, 0xE8, 0xDC, 0x01, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
};

// secp224r1 aka NIST P-224
static const uint8_t secp224r1_p[] =
{
 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224r1_b[] =
{
 0xB4, 0xFF, 0x55, 0x23, 0x43, 0x39, 0x0B, 0x27,
 0xBA, 0xD8, 0xBF, 0xD7, 0xB7, 0xB0, 0x44, 0x50,
 0x56, 0x32, 0x41, 0xF5, 0xAB, 0xB3, 0x04, 0x0C,
 0x85, 0x0A, 0x05, 0xB4, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224r1_x[] =
{
 0x21, 0x1D, 0x5C, 0x11, 0xD6, 0x80, 0x32, 0x34,
 0x22, 0x11, 0xC2, 0x56, 0xD3, 0xC1, 0x03, 0x4A,
 0xB9, 0x90, 0x13, 0x32, 0x7F, 0xBF, 0xB4, 0x6B,
 0xBD, 0x0C, 0x0E, 0xB7, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224r1_y[] =
{
 0x34, 0x7E, 0x00, 0x85, 0x99, 0x81, 0xD5, 0x44,
 0x64, 0x47, 0x07, 0x5A, 0xA0, 0x75, 0x43, 0xCD,
 0xE6, 0xDF, 0x22, 0x4C, 0xFB, 0x23, 0xF7, 0xB5,
 0x88, 0x63, 0x37, 0xBD, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp224r1_n[] =
{
 0x3D, 0x2A, 0x5C, 0x5C, 0x45, 0x29, 0xDD, 0x13,
 0x3E, 0xF0, 0xB8, 0xE0, 0xA2, 0x16, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
};

// secp256k1
static const uint8_t secp256k1_p[] =
{
 0x2F, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

static const uint8_t secp256k1_b[] =
{
 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp256k1_x[] =
{
 0x98, 0x17, 0xF8, 0x16, 0x5B, 0x81, 0xF2, 0x59,
 0xD9, 0x28, 0xCE, 0x2D, 0xDB, 0xFC, 0x9B, 0x02,
 0x07, 0x0B, 0x87, 0xCE, 0x95, 0x62, 0xA0, 0x55,
 0xAC, 0xBB, 0xDC, 0xF9, 0x7E, 0x66, 0xBE, 0x79
};

static const uint8_t secp256k1_y[] =
{
 0xB8, 0xD4, 0x10, 0xFB, 0x8F, 0xD0, 0x47, 0x9C,
 0x19, 0x54, 0x85, 0xA6, 0x48, 0xB4, 0x17, 0xFD,
 0xA8, 0x08, 0x11, 0x0E, 0xFC, 0xFB, 0xA4, 0x5D,
 0x65, 0xC4, 0xA3, 0x26, 0x77, 0xDA, 0x3A, 0x48
};

static const uint8_t secp256k1_n[] =
{
 0x41, 0x41, 0x36, 0xD0, 0x8C, 0x5E, 0xD2, 0xBF,
 0x3B, 0xA0, 0x48, 0xAF, 0xE6, 0xDC, 0xAE, 0xBA,
 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// secp256r1 aka prime256v1 aka NIST P-256
static const uint8_t secp256r1_p[] =
{
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
};

static const uint8_t secp256r1_b[] =
{
 0x4B, 0x60, 0xD2, 0x27, 0x3E, 0x3C, 0xCE, 0x3B,
 0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06, 0x1D, 0x65,
 0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3,
 0xE7, 0x93, 0x3A, 0xAA, 0xD8, 0x35, 0xC6, 0x5A
};

static const uint8_t secp256r1_x[] =
{
 0x96, 0xC2, 0x98, 0xD8, 0x45, 0x39, 0xA1, 0xF4,
 0xA0, 0x33, 0xEB, 0x2D, 0x81, 0x7D, 0x03, 0x77,
 0xF2, 0x40, 0xA4, 0x63, 0xE5, 0xE6, 0xBC, 0xF8,
 0x47, 0x42, 0x2C, 0xE1, 0xF2, 0xD1, 0x17, 0x6B
};

static const uint8_t secp256r1_y[] =
{
 0xF5, 0x51, 0xBF, 0x37, 0x68, 0x40, 0xB6, 0xCB,
 0xCE, 0x5E, 0x31, 0x6B, 0x57, 0x33, 0xCE, 0x2B,
 0x16, 0x9E, 0x0F, 0x7C, 0x4A, 0xEB, 0xE7, 0x8E,
 0x9B, 0x7F, 0x1A, 0xFE, 0xE2, 0x42, 0xE3, 0x4F
};

static const uint8_t secp256r1_n[] =
{
 0x51, 0x25, 0x63, 0xFC, 0xC2, 0xCA, 0xB9, 0xF3,
 0x84, 0x9E, 0x17, 0xA7, 0xAD, 0xFA, 0xE6, 0xBC,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
};

// secp384r1 aka NIST P-384
static const uint8_t secp384r1_p[] =
{
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

static const uint8_t secp384r1_b[] =
{
 0xEF, 0x2A, 0xEC, 0xD3, 0xED, 0xC8, 0x85, 0x2A,
 0x9D, 0xD1, 0x2E, 0x8A, 0x8D, 0x39, 0x56, 0xC6,
 0x5A, 0x87, 0x13, 0x50, 0x8F, 0x08, 0x14, 0x03,
 0x12, 0x41, 0x81, 0xFE, 0x6E, 0x9C, 0x1D, 0x18,
 0x19, 0x2D, 0xF8, 0xE3, 0x6B, 0x05, 0x8E, 0x98,
 0xE4, 0xE7, 0x3E, 0xE2, 0xA7, 0x2F, 0x31, 0xB3
};

static const uint8_t secp384r1_x[] =
{
 0xB7, 0x0A, 0x76, 0x72, 0x38, 0x5E, 0x54, 0x3A,
 0x6C, 0x29, 0x55, 0xBF, 0x5D, 0xF2, 0x02, 0x55,
 0x38, 0x2A, 0x54, 0x82, 0xE0, 0x41, 0xF7, 0x59,
 0x98, 0x9B, 0xA7, 0x8B, 0x62, 0x3B, 0x1D, 0x6E,
 0x74, 0xAD, 0x20, 0xF3, 0x1E, 0xC7, 0xB1, 0x8E,
 0x37, 0x05, 0x8B, 0xBE, 0x22, 0xCA, 0x87, 0xAA
};

static const uint8_t secp384r1_y[] =
{
 0x5F, 0x0E, 0xEA, 0x90, 0x7C, 0x1D, 0x43, 0x7A,
 0x9D, 0x81, 0x7E, 0x1D, 0xCE, 0xB1, 0x60, 0x0A,
 0xC0, 0xB8, 0xF0, 0xB5, 0x13, 0x31, 0xDA, 0xE9,
 0x7C, 0x14, 0x9A, 0x28, 0xBD, 0x1D, 0xF4, 0xF8,
 0x29, 0xDC, 0x92, 0x92, 0xBF, 0x98, 0x9E, 0x5D,
 0x6F, 0x2C, 0x26, 0x96, 0x4A, 0xDE, 0x17, 0x36
};

static const uint8_t secp384r1_n[] =
{
 0x73, 0x29, 0xC5, 0xCC, 0x6A, 0x19, 0xEC, 0xEC,
 0x7A, 0xA7, 0xB0, 0x48, 0xB2, 0x0D, 0x1A, 0x58,
 0xDF, 0x2D, 0x37, 0xF4, 0x81, 0x4D, 0x63, 0xC7,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

// secp521r1 aka NIST P-521
static const uint8_t secp521r1_p[] =
{
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp521r1_b[] =
{
 0x00, 0x3F, 0x50, 0x6B, 0xD4, 0x1F, 0x45, 0xEF,
 0xF1, 0x34, 0x2C, 0x3D, 0x88, 0xDF, 0x73, 0x35,
 0x07, 0xBF, 0xB1, 0x3B, 0xBD, 0xC0, 0x52, 0x16,
 0x7B, 0x93, 0x7E, 0xEC, 0x51, 0x39, 0x19, 0x56,
 0xE1, 0x09, 0xF1, 0x8E, 0x91, 0x89, 0xB4, 0xB8,
 0xF3, 0x15, 0xB3, 0x99, 0x5B, 0x72, 0xDA, 0xA2,
 0xEE, 0x40, 0x85, 0xB6, 0xA0, 0x21, 0x9A, 0x92,
 0x1F, 0x9A, 0x1C, 0x8E, 0x61, 0xB9, 0x3E, 0x95,
 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp521r1_x[] =
{
 0x66, 0xBD, 0xE5, 0xC2, 0x31, 0x7E, 0x7E, 0xF9,
 0x9B, 0x42, 0x6A, 0x85, 0xC1, 0xB3, 0x48, 0x33,
 0xDE, 0xA8, 0xFF, 0xA2, 0x27, 0xC1, 0x1D, 0xFE,
 0x28, 0x59, 0xE7, 0xEF, 0x77, 0x5E, 0x4B, 0xA1,
 0xBA, 0x3D, 0x4D, 0x6B, 0x60, 0xAF, 0x28, 0xF8,
 0x21, 0xB5, 0x3F, 0x05, 0x39, 0x81, 0x64, 0x9C,
 0x42, 0xB4, 0x95, 0x23, 0x66, 0xCB, 0x3E, 0x9E,
 0xCD, 0xE9, 0x04, 0x04, 0xB7, 0x06, 0x8E, 0x85,
 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp521r1_y[] =
{
 0x50, 0x66, 0xD1, 0x9F, 0x76, 0x94, 0xBE, 0x88,
 0x40, 0xC2, 0x72, 0xA2, 0x86, 0x70, 0x3C, 0x35,
 0x61, 0x07, 0xAD, 0x3F, 0x01, 0xB9, 0x50, 0xC5,
 0x40, 0x26, 0xF4, 0x5E, 0x99, 0x72, 0xEE, 0x97,
 0x2C, 0x66, 0x3E, 0x27, 0x17, 0xBD, 0xAF, 0x17,
 0x68, 0x44, 0x9B, 0x57, 0x49, 0x44, 0xF5, 0x98,
 0xD9, 0x1B, 0x7D, 0x2C, 0xB4, 0x5F, 0x8A, 0x5C,
 0x04, 0xC0, 0x3B, 0x9A, 0x78, 0x6A, 0x29, 0x39,
 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const uint8_t secp521r1_n[] =
{
 0x09, 0x64, 0x38, 0x91, 0x1E, 0xB7, 0x6F, 0xBB,
 0xAE, 0x47, 0x9C, 0x89, 0xB8, 0xC9, 0xB5, 0x3B,
 0xD0, 0xA5, 0x09, 0xF7, 0x48, 0x01, 0xCC, 0x7F,
 0x6B, 0x96, 0x2F, 0xBF, 0x83, 0x87, 0x86, 0x51,
 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define DEFINE_CURVE(name, prefix, id, bits, a) \
 { \
  name, id, bits, \
  sizeof(prefix ## _p), prefix ## _p, \
  a, NULL, \
  prefix ## _x, \
  prefix ## _y, \
  prefix ## _n, \
  sizeof(prefix ## _b), prefix ## _b \
 }

static const curve_wei curves[] =
{
 DEFINE_CURVE("secp192k1", secp192k1, ID_SECP192K1, 192,  0),
 DEFINE_CURVE("secp192r1", secp192r1, ID_SECP192R1, 192, -3),
 DEFINE_CURVE("secp224k1", secp224k1, ID_SECP224K1, 224,  0),
 DEFINE_CURVE("secp224r1", secp224r1, ID_SECP224R1, 224, -3),
 DEFINE_CURVE("secp256k1", secp256k1, ID_SECP256K1, 256,  0),
 DEFINE_CURVE("secp256r1", secp256r1, ID_SECP256R1, 256, -3),
 DEFINE_CURVE("secp384r1", secp384r1, ID_SECP384R1, 384, -3),
 DEFINE_CURVE("secp521r1", secp521r1, ID_SECP521R1, 521, -3),
};

static const unsigned CURVE_COUNT = sizeof(curves)/sizeof(curves[0]);

const curve_wei *get_wei_curve_by_id(int id)
{
 for (unsigned i = 0; i < CURVE_COUNT; i++)
  if (curves[i].id == id) return curves + i;
 return nullptr;
}

const curve_wei *get_wei_curve_by_name(const char *name)
{
 for (unsigned i = 0; i < CURVE_COUNT; i++)
  if (!strcmp(name, curves[i].name)) return curves + i;
 return nullptr;
}

static bigint_t create_static_bigint(const uint8_t *buf, size_t size)
{
#ifdef __LITTLE_ENDIAN__
 size_t words = size >> BIGINT_WORD_SHIFT;
 const bigint_word_t *wbuf = reinterpret_cast<const bigint_word_t*>(buf);
 while (!wbuf[words-1]) words--;
 return bigint_create_buf(wbuf, words, 0, 0);
#else
 return bigint_create_bytes_le(buf, size);
#endif
}

void init_curve(ec_wei_def_t *def, ec_point_t *g, bigint_t *pn, const curve_wei *params)
{
 bigint_t a = nullptr;
 bigint_t p = create_static_bigint(params->p, params->size);
 bigint_t x = create_static_bigint(params->x, params->size);
 bigint_t y = create_static_bigint(params->y, params->size);
 bigint_t b = create_static_bigint(params->b, params->b_size);
 if (params->a) a = create_static_bigint(params->a, params->size);
 if (pn) *pn = create_static_bigint(params->n, params->size);
 if (a)
  ec_wei_def_init(def, p, a, b);
 else
  ec_wei_def_init_small_a(def, p, params->a_small, b);
 ec_wei_point_init_values(g, def, x, y);
}
